{\rtf1\ansi\ansicpg1252\cocoartf1671\cocoasubrtf600
{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\paperw11900\paperh16840\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\fs24 \cf0 /*\
Implements EIP20 token standard: https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20.md\
.*/\
\
\
pragma solidity ^0.4.21;\
\
import "./EIP20Interface.sol";\
\
\
contract CheetahToken is EIP20Interface \{\
\
    uint256 constant private MAX_UINT256 = 2**256 - 1;\
    mapping (address => uint256) public balances;\
    mapping (address => mapping (address => uint256)) public allowed;\
    /*\
    NOTE:\
    The following variables are OPTIONAL vanities. One does not have to include them.\
    They allow one to customise the token contract & in no way influences the core functionality.\
    Some wallets/interfaces might not even bother to look at this information.\
    */\
    string public name;                  \
    uint8 public decimals;               \
    string public symbol;                 \
\
    function CheetahToken(\
        uint256 _initialAmount,\
        string _tokenName,\
        uint8 _decimalUnits,\
        string _tokenSymbol \
    ) public \{\
        balances[msg.sender] = _initialAmount;               // Give the creator all initial tokens\
        totalSupply = _initialAmount;                        // Update total supply\
        name = _tokenName;                                   // Set the name for display purposes\
        decimals = _decimalUnits;                            // Amount of decimals for display purposes\
        symbol = _tokenSymbol;                               // Set the symbol for display purposes\
    \}\
\
    function transfer(address _to, uint256 _value) public returns (bool success) \{\
        require(balances[msg.sender] >= _value);\
        balances[msg.sender] -= _value;\
        balances[_to] += _value;\
        emit Transfer(msg.sender, _to, _value); //solhint-disable-line indent, no-unused-vars\
        return true;\
    \}\
\
    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) \{\
        uint256 allowance = allowed[_from][msg.sender];\
        require(balances[_from] >= _value && allowance >= _value);\
        balances[_to] += _value;\
        balances[_from] -= _value;\
        if (allowance < MAX_UINT256) \{\
            allowed[_from][msg.sender] -= _value;\
        \}\
        emit Transfer(_from, _to, _value); //solhint-disable-line indent, no-unused-vars\
        return true;\
    \}\
\
    function balanceOf(address _owner) public view returns (uint256 balance) \{\
        return balances[_owner];\
    \}\
\
    function approve(address _spender, uint256 _value) public returns (bool success) \{\
        allowed[msg.sender][_spender] = _value;\
        emit Approval(msg.sender, _spender, _value); //solhint-disable-line indent, no-unused-vars\
        return true;\
    \}\
\
    function allowance(address _owner, address _spender) public view returns (uint256 remaining) \{\
        return allowed[_owner][_spender];\
    \}\
\}\
          \},\
          \{\
            "name": "_tokenSymbol",\
            "type": "string"\
          \}\
        ],\
        "payable": false,\
        "stateMutability": "nonpayable",\
        "type": "constructor"\
      \},\
      \{\
        "anonymous": false,\
        "inputs": [\
          \{\
            "indexed": true,\
            "name": "_from",\
            "type": "address"\
          \},\
          \{\
            "indexed": true,\
            "name": "_to",\
            "type": "address"\
          \},\
          \{\
            "indexed": false,\
            "name": "_value",\
            "type": "uint256"\
          \}\
        ],\
        "name": "Transfer",\
        "type": "event"\
      \},\
      \{\
        "anonymous": false,\
        "inputs": [\
          \{\
            "indexed": true,\
            "name": "_owner",\
            "type": "address"\
          \},\
          \{\
            "indexed": true,\
            "name": "_spender",\
            "type": "address"\
          \},\
          \{\
            "indexed": false,\
            "name": "_value",\
            "type": "uint256"\
          \}\
        ],\
        "name": "Approval",\
        "type": "event"\
      \},\
      \{\
        "constant": true,\
        "inputs": [\
          \{\
            "name": "_owner",\
            "type": "address"\
          \},\
          \{\
            "name": "_spender",\
            "type": "address"\
          \}\
        ],\
        "name": "allowance",\
        "outputs": [\
          \{\
            "name": "remaining",\
            "type": "uint256"\
          \}\
        ],\
        "payable": false,\
        "stateMutability": "view",\
        "type": "function"\
      \},\
      \{\
        "constant": true,\
        "inputs": [\
          \{\
            "name": "",\
            "type": "address"\
          \},\
          \{\
            "name": "",\
            "type": "address"\
          \}\
        ],\
        "name": "allowed",\
        "outputs": [\
          \{\
            "name": "",\
            "type": "uint256"\
          \}\
        ],\
        "payable": false,\
        "stateMutability": "view",\
        "type": "function"\
      \},\
      \{\
        "constant": true,\
        "inputs": [\
          \{\
            "name": "_owner",\
            "type": "address"\
          \}\
        ],\
        "name": "balanceOf",\
        "outputs": [\
          \{\
            "name": "balance",\
            "type": "uint256"\
          \}\
        ],\
        "payable": false,\
        "stateMutability": "view",\
        "type": "function"\
      \},\
      \{\
        "constant": true,\
        "inputs": [\
          \{\
            "name": "",\
            "type": "address"\
          \}\
        ],\
        "name": "balances",\
        "outputs": [\
          \{\
            "name": "",\
            "type": "uint256"\
          \}\
        ],\
        "payable": false,\
        "stateMutability": "view",\
        "type": "function"\
      \},\
      \{\
        "constant": true,\
        "inputs": [],\
        "name": "decimals",\
        "outputs": [\
          \{\
            "name": "",\
            "type": "uint8"\
          \}\
        ],\
        "payable": false,\
        "stateMutability": "view",\
        "type": "function"\
      \},\
      \{\
        "constant": true,\
        "inputs": [],\
        "name": "name",\
        "outputs": [\
          \{\
            "name": "",\
            "type": "string"\
          \}\
        ],\
        "payable": false,\
        "stateMutability": "view",\
        "type": "function"\
      \},\
      \{\
        "constant": true,\
        "inputs": [],\
        "name": "symbol",\
        "outputs": [\
          \{\
            "name": "",\
            "type": "string"\
          \}\
        ],\
        "payable": false,\
        "stateMutability": "view",\
        "type": "function"\
      \},\
      \{\
        "constant": true,\
        "inputs": [],\
        "name": "totalSupply",\
        "outputs": [\
          \{\
            "name": "",\
            "type": "uint256"\
          \}\
        ],\
        "payable": false,\
        "stateMutability": "view",\
        "type": "function"\
      \}\
    ]\
  \}\
\}}